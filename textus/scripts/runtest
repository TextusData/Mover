#!/usr/bin/perl 
# -*- perl -*

#
#   This program is free software: you can redistribute it and/or
#   modify it under the terms of the GNU General Public License as
#   published by the Free Software Foundation, version 3 of the
#   License.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see
#   <http://www.gnu.org/licenses/>.
#
#

use strict;
use Getopt::Long;

sub hostname {
  return system('hostname');
}

sub main {
    my $timeallowed = 30;
    my %options=('timeallowed=i' => \$timeallowed);
    my $status=0;
    my $tmpdir;

    
    Getopt::Long::GetOptionsFromArray(\@_, %options) or die "Bad Options.";
    

    unless ($ENV{TMPDIR}) {
	do {
	    $tmpdir ="/data/tmp/" . hostname() . "time-" . localtime(time) . "/pid-" . $$ ."/rnd-".rand(10);
	    $tmpdir =~ s/ /_/g;
	} while (-e $tmpdir);
	system ("mkdir -p $tmpdir");
	$ENV{TMPDIR}=$tmpdir;
    }

    my $pid;

    eval {
	local $SIG{ALRM} = sub { die "alarm\n" };
	#$ENV{ODBCINI}='/Users/rossb/.odbc.ini';
	#for my $key (sort keys %ENV) {
	#  print "$key = $ENV{$key}\n";
	#}
	alarm $timeallowed;
	$pid = fork;
	if ($pid == 0) {
	    setpgrp;
	    exec @_;
	}
	waitpid $pid, 0;
	$status=$?;
	alarm 0;
    };

    if ($@) {
	die unless $@ eq "alarm\n";
	print STDERR "\nTimed out.\n";
	kill "TERM", -$pid;
	kill 9, -$pid;
	exit 1;
    }

    system ("rm -rf $tmpdir") if ($tmpdir and -e $tmpdir);

    print "Runtest exiting with signal = ".($status & 0xFF) . ", status= ".($status >> 8)." return value = ".(($status >> 8) | $status)."\n" if ($status);
    exit (($status>>8) | $status);
}

main(@ARGV) unless (caller);

