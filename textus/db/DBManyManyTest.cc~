/* DBAutoDerefTest.cc -*- c++ -*-
 * Copyright (c) 2012, 2013 Ross Biro
 *
 * Test the DBAutoDeref class to hold foreign keys and be able to
 * dereference them.
 */
#include "textus/testing/UnitTest.h"
#include "textus/base/Base.h"
#include "textus/db/ColType.h"
#include "textus/db/DBAutoDeref.h"
#include "textus/db/DBHandle.h"

using namespace textus::testing;
using namespace textus::base;
using namespace textus::db;

#define MAX_ROWS 1000

namespace textus { namespace db {

class TestDB2: public DBType {
  BEGIN_DB_DECL(TestDB2);
  DECL_DB_ENTRY(TestDB2, UUID, ColTypeUUID, pk, DT_PRIMARY_KEY);
  DECL_DB_ENTRY(TestDB2, string, DBString<100>, name, 0);
  END_DB_DECL(TestDB2);

public:
  TestDB2() {}
  virtual ~TestDB2() {}

  string table() { return "test_table_2"; }

};

class TestDB1: public DBType {
  BEGIN_DB_DECL(TestDB1);
  DECL_DB_ENTRY(TestDB1, UUID, ColTypeUUID, pk, DT_PRIMARY_KEY);
  DECL_DB_ENTRY(TestDB1, UUID, DBAutoDeref<TestDB2>, fk, 0);
  END_DB_DECL(TestDB1);

public:
  TestDB1() {}
  virtual ~TestDB1() {}

  string table() { return "test_table_1"; }

};



STATIC_DB_DECL(TestDB1);
STATIC_DB_DECL(TestDB2);

class DBAutoDerefTest: public UnitTest {
private:
  const char *dbScript() { return "$(APP_PATH)/db/create_db_script"; }

public:
  DBAutoDerefTest();
  ~DBAutoDerefTest();

  void run_tests();
};

DBAutoDerefTest::DBAutoDerefTest(): UnitTest(__FILE__)
{
}

DBAutoDerefTest::~DBAutoDerefTest()
{
}

void DBAutoDerefTest::run_tests() {
  AUTODEREF(DBInstance *, instance);
  fprintf(stderr, "Creating Test Instance...");
  instance = new DBInstance();
  assert(instance!= NULL);
  instance->setServer(getDSN());
  instance->setUser("unittest");
  fprintf(stderr, "Connecting...");

  assert (instance->connect() == 0);
  assert(instance->getHandle() != NULL);
  fprintf (stderr, "ok\n");

  TestDB1 tdb;

  fprintf(stderr, "executing query....");
  int res = TestDB1::query("select * from test_table_1", 1, &tdb, instance->getHandle());
  assert (res == 1);
  fprintf (stderr, "ok\n");

  fprintf(stderr, "resolving foreign key....");
  TestDB2 *tdb2 = tdb.get_column_fk()->refValue(instance->getHandle());
  assert(tdb2 != NULL);
  fprintf (stderr, "ok\n");


}

}} //namespace

UnitTest *createTestObject(int argc, const char *argv[]) {
  return new DBAutoDerefTest();
}
