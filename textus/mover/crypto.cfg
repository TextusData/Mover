# crypto.cfg 
# Copyright (c) 2013-2014 Ross Biro
# This configuration file describes the crypto systems available to mover.
#
#   This program is free software: you can redistribute it and/or
#   modify it under the terms of the GNU General Public License as
#   published by the Free Software Foundation, version 3 of the
#   License.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see
#   <http://www.gnu.org/licenses/>.
#
#
#
otp= {
     key-desc= { key-file= {type=file, default=<+otp-%lu.dat>},
     	       	 key-bits={type=number, default=16384}},
     key-name=key-file
     use-once= true,
     key-format= raw,
     encrypt=<$app-binary-path>/xor - <$key-file>
     decrypt=<$app-binary-path>/xor - <$key-file>
     genkey= <$app-binary-path>/otp --generate=<$key-bits> --linux_random_device=/dev/urandom --sysrand_paths_clear --sysrand_paths=/dev/urandom <>><$key-file>
},

gpg= {
     key-desc= { key-name= { type=string, default=<+Key%lu>}, 
     	       key-file= {type=file, default=gpg-keyring},
     	       secret-key-file= {type=file, default=gpg-secret-keyring},
	       key-bits= {type=number, default=2048},
	       },
     key-format= pem,
     encrypt= gpg --encrypt --batch --recipient \"<$key-name>\" --keyring <$key-file> --secret-keyring /dev/null --no-default-keyring --yes --always-trust,
     decrypt= gpg --decrypt --batch --secret-keyring <$secret-key-file> --keyring <$key-file> --no-default-keyring,
     genkey= echo -e 'Key-Type: default\\n Key-Length:<$key-bits>\\n Name-Real:<$key-name>\\n Subkey-Type:default\\n Subkey-Length:<$key-bits>\\n <?temporary:--no-protection>\\n%commit\\n' | gpg --gen-key --batch --keyring <$key-file> --secret-keyring <$secret-key-file> --no-default-keyring,
     export-public= gpg --batch --no-default-keyring --secret-keyring <$secret-key-file> --keyring <$key-file> --export -a \"<$key-name>\",
     import-public= gpg --batch --no-default-keyring --secret-keyring <$secret-key-file> --keyring <$key-file> --import
     delete-public= gpg --batch --secret-keyring <$secret-key-file> --no-default-keyring --keyring <$key-file> --delete-key \"<$key-name>\"
     delete-private= gpg --batch --secret-keyring <$secret-key-file> --no-default-keyring --keyring <$key-file> --delete-secret-key \"<$key-name>\"
     get-key-name = "\"([a-zA-Z0-9 ]+)(\"|\\(|<<>)"
     key-name-group-no = 0
     
}

openssl= {
     key-desc= { key-file= {type=file, default=<+openssl-key-%lu>.pem} 
     	         cert-file= {type=file, default=<+openssl-key-%lu>.crt}
	       	 key-bits= {type=number, default=2048},
		 key-name= {type=string, default=<+openssl-key-%lu>},
	       },
     key-format= pem,
     encrypt= openssl smime -encrypt -binary -aes-256-cbc -stream -outform DER <$cert-file>
     decrypt= openssl smime -decrypt -binary -stream -inform DER -inkey <$key-file>
     genkey= openssl genpkey -algorithm rsa -outform PEM -pkeyopt rsa_keygen_bits:<$key-bits> -out <$key-file> &&  echo -e 'XX\\n\\n\\n\\n\\n' \$(basename <$key-file>)'\\n\\n' |openssl req -new -x509 -key <$key-file> -out <$cert-file> -days 365 
     export-public: cat <$cert-file>
}
